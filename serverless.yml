service: jars-serverless
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  environment:
    MONGODB_URI: mongodb+srv://lambda:L4mbd4.@cluster0.ykgrq.mongodb.net/jar?retryWrites=true&w=majority

functions:
  create-user:
    handler: handler/createUser.createUser
    events:
      - http:
          path: users
          method: post
          cors:
            origin: '*'  # Allows all origins
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
  get-user:
    handler: handler/getUser.getUser
    events:
      - http:
          path: users
          method: get
          cors:
            origin: '*'  # Allows all origins
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
  get-user-by-email:
    handler: handler/getUser.getUserByEmail
    events:
      - http:
          path: users
          method: get
          cors:
            origin: '*'  # Allows all origins
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
  update-user:
    handler: handler/updateUser.updateUser
    events:
      - http:
          path: users/id/{id}
          method: put
          cors:
            origin: '*'  # Allows all origins
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
  delete-user:
    handler: handler/deleteUser.deleteUser
    events:
      - http:
          path: users/id/{id}
          method: delete
          cors:
            origin: '*'  # Allows all origins
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
  create-movement:
    handler: handler/createMovement.createMovement
    events:
      - http:
          path: movements
          method: post
          cors:
            origin: '*'  # Allows all origins
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
  get-movement:
    handler: handler/getMovement.getMovement
    events:
      - http:
          path: movements
          method: get
          cors:
            origin: '*'  # Allows all origins
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
  update-movement:
    handler: handler/updateMovement.updateMovement
    events:
      - http:
          path: movements/{id}
          method: put
          cors:
            origin: '*'  # Allows all origins
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
  delete-movement:
    handler: handler/deleteMovement.deleteMovement
    events:
      - http:
          path: movements/{id}
          method: delete
          cors:
            origin: '*'  # Allows all origins
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
  create-jar:
    handler: handler/createJar.createJar
    events:
      - http:
          path: jars
          method: post
          cors:
            origin: '*'  # Allows all origins
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
  get-jar:
    handler: handler/getJar.getJar
    events:
      - http:
          path: jars
          method: get
          cors:
            origin: '*'  # Allows all origins
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
  update-jar:
    handler: handler/updateJar.updateJar
    events:
      - http:
          path: jars/{id}
          method: put
          cors:
            origin: '*'  # Allows all origins
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
  delete-jar:
    handler: handler/deleteJar.deleteJar
    events:
      - http:
          path: jars/{id}
          method: delete
          cors:
            origin: '*'  # Allows all origins
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
